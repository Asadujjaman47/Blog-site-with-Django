1. create My_Blog_Project:
   i.     here django version was: 3.0.2 installed!
	> django-admin startproject My_Blog_Project
and open VS

2. create virtual env and activate
in CMD:
        python -m venv env
        env\Scripts\activate

3.  
i.  then, install django: 3.2
        pip install django==3.2
ii.  and install pillow:
        pip install pillow

4.here we work with 2 app
Blog and Login:
        py manage.py startapp App_Login 
        py manage.py startapp App_Blog 

create folder: 
        templates
        media
        static
and link them in Setting.py
        i. Setting.py:
                INSTALLED_APPS = [
                        'django.contrib.admin',
                        'django.contrib.auth',
                        'django.contrib.contenttypes',
                        'django.contrib.sessions',
                        'django.contrib.messages',
                        'django.contrib.staticfiles',
                ->     'App_Blog',
                ->     'App_Login'
                ]

        ii. templates, static, media:

                # Build paths inside the project like this: BASE_DIR / 'subdir'.
                BASE_DIR = Path(__file__).resolve().parent.parent
                TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
                STATIC_DIR = os.path.join(BASE_DIR, 'static')
                MEDIA_DIR = os.path.join(BASE_DIR, 'media')

        iii. TEMPLATES_DIR:
                TEMPLATES = [
                {
                        'BACKEND': 'django.template.backends.django.DjangoTemplates',
                ->      'DIRS': [TEMPLATES_DIR, ],
                        'APP_DIRS': True,
                        'OPTIONS': {
                                'context_processors': [
                                        'django.template.context_processors.debug',
                                        'django.template.context_processors.request',
                                        'django.contrib.auth.context_processors.auth',
                                        'django.contrib.messages.context_processors.messages',
                                ],
                        },
                        },
                ]

        iv. static and media:
                STATIC_URL = '/static/'
                STATIC_DIR = [STATIC_DIR, ]

                # MEDIA
                MEDIA_ROOT = MEDIA_DIR
                MEDIA_URL = '/media/'

V2:
5. create Model
App_Login/models.py:
        // here create UserProfile
        then run migration
                > py manage.py migrate
                > py manage.py makemigrations App_Login
                > py manage.py migrate

App_Blog/models.py:
        // create Blog model:

        // create Comment model:

        // create reaction: Likes model

        then make migration:
                > py manage.py migrate
                > py manage.py makemigrations App_Blog
                > py manage.py migrate


6. create superuser:
        >py manage.py createsuperuser

        Username (leave blank to use 'asadu'): admin
        Email address: asdujjaman255@gmail.com
        Password: 1234
        Password (again): 1234
        Bypass password validation and create user anyway? [y/N]: y
        Superuser created successfully.


        >py manage.py runserver
                // and go admin site:
                http://127.0.0.1:8000/admin
        
        // here we will not see any model,
        cz we didn;t register any model

7. register model:
 App_Blog/admin.py:
        from App_Blog.models import Blog, Comment, Likes

        # Register your models here.

        admin.site.register(Blog)
        admin.site.register(Comment)
        admin.site.register(Likes)

App_Login/admin.py:
        from App_Login.models import UserProfile

        # Register your models here.

        admin.site.register(UserProfile)  

Now we can see all models





V3:
8. main project urls.py:
->       from django.urls import path, include

        urlpatterns = [
                path('admin/', admin.site.urls),
->              path('account/', include('App_Login.urls')),
->              path('blog/', include('App_Blog.urls')),
                # path('',)
        ]

9. now create a view for project folder:
My_Blog_Project/views.py:

        from django.http import HttpResponse


        def Index(request):
        return HttpResponse("I am homepage")

10.
urls.py:

        from . import views

        urlpatterns = [
        path('admin/', admin.site.urls),
        path('account/', include('App_Login.urls')),
        path('blog/', include('App_Blog.urls')),
->      path('', views.Index, name='index'),
        ]

11: avoid error, create urls.py file in App_Blog and App_Login:
App_Login/urls.py:
        from django.urls import path

        urlpatterns = [

        ]

App_Blog/urls.py:
        from django.urls import path

        urlpatterns = [

        ]

now run server, and see weverthing is ok


12:
create folder in templates:
        App_Blog
        App_Login

and a base.html file
i.boilerplate:
        <!doctype html>
        <html lang="en">
        <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">

        <title>{% block title_block %} Blogs {% endblock %}</title>
        </head>
        <body>



        <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
        </body>
        </html>

ii. add navigation:

    <nav class="navbar navbar-expand-sm navbar-dark bg-dark">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav">
            <li class="nav-item active">
              <a class="nav-link" href="{% url 'index' %}">Home <span class="sr-only">(current)</span></a>
            </li>
            {% comment %} <li class="nav-item">
              <a class="nav-link" href="#">Features</a>
            </li> {% endcomment %}
          </ul>
        </div>
      </nav>


13. create template: template/App_Blog/blog_list.html

i. and in base.html:
    {% block body_block %}

    {% endblock %}

ii. blog_list.html:
        {% extends 'base.html' %}
        {% block title_block %} Home {% endblock %}
        {% block body_block %}
        <h1>I am blog homepage</h1>


        {% endblock %}

14.
App_Blog/view.py:
from django.shortcuts import render

# Create your views here.


def blog_list(request):
    return render(request, 'App_Blog/blog_list.html', context={})


15. App_Blog/urls.py:

from django.urls import path
# from . import views
from App_Blog import views

app_name = 'App_Blog'

urlpatterns = [
    path('', views.blog_list, name='blog_list'),
]


16. set the site home page:
        (when type site name only, it redirect in blog.html)
i.  viwes.py > Index:
                from django.http import HttpResponse
                from django.urls import reverse
                from django.shortcuts import HttpResponseRedirect


                def Index(request):
                return HttpResponseRedirect(reverse('App_Blog:blog_list'))

here rediction:
        main urls: '' 
                view > Index:      redirect:     App_Blog:blog_list
                        (App_Blog > urls > blog_list)
                                blog_list: App_Blog/blog_list.html


 
V4:
17. App_Login/views.py:
        from django.shortcuts import render
        from django.contrib.auth.forms import UserCreationForm

        # Create your views here.


        def sign_up(request):
        form = UserCreationForm()
        registered = False
        if request.method == 'POST':
                form = UserCreationForm(data=request.POST)
                if form.is_valid():
                form.save()
                registered = True

        dict = {'form': form, 'registered': registered}
        return render(request, 'App_Login/signup.html', context=dict)

18.templates/App_Login/signup.html:
        {% extends 'base.html' %}
        {% block title_block %} Create New Account {% endblock %}
        {% block body_block %}
        {% if registered %}
        <div class="alert alert-success">
        Account Created Successfully! <a href="">Login Here</a>
        </div>
        {% else %}
        <h2>Create New Account:</h2>
        <form method="POST">
        {{ form }}
        <button type="submit" class="btn btn-success btn-sm">Create Account</button>
        </form>
        <br>
        <p>Already have an account? <a href="" >Login Here</a></p>
        {% endif %}
        {% endblock %}

19. urls pattern
        App_Login/urls.py
        from django.urls import path
        from . import views

        app_name = 'App_Login'

        urlpatterns = [
        path('signup/', views.sign_up, name='signup')
        ]

20. at this upper urls in base.html:
// add a extra navbar:
        <li class="nav-item">
              <a class="nav-link" href="{% url 'App_Login:signup' %}">Signup</a>
            </li>

21. 
i. install crispy forms:
        > pip install django-crispy-forms

ii. add this crispy forms in 
settings.py:
        INSTALLED_APPS = [
                'django.contrib.admin',
                'django.contrib.auth',
                'django.contrib.contenttypes',
                'django.contrib.sessions',
                'django.contrib.messages',
                'django.contrib.staticfiles',
                'App_Blog',
                'App_Login',
                'crispy_forms',
        ]

iii.
note: form esob diye handle korte pari:
        bootstrap, bootstrap3, bootstrap4, uni-form
        // ekhane bootstrap4 use korbo

CRISPY_TEMPLATE_PACK = 'bootstrap4'

iv. use this crispy form :
so, load crispy form in signup.html

        {% load crispy_forms_tags %}

and 
        {{ form|crispy }}


v. keep base.html in a div container:
base.html:

    <div class="container" style="padding-top:20px">
      {% block body_block %}

      {% endblock %}
    </div>



V5:
22: create a login.html file in App_Login:
and extends base block

23: now its views:
App_Login/views.py:
login_page:
        AuthenticationForm

def login_page(request):
    form = AuthenticationForm()
    if request.method == 'POST':
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)

            if user is not None:
                login(request, user)
                return HttpResponseRedirect(reverse('index'))

    return render(request, 'App_Login/login.html', context={'form': form})


23. crispy form add in login.html:
        {% load crispy_forms_tags %}

        <form method='POST'>
        {{ form|crispy }}
        {% csrf_token %}
        <button type="submit" class="btn btn-primary btn-sm">Login</button>
        </form>

24. App_Login/urls.py:
    path('login/', views.login_page, name='login')

25. signup.html e href gula fillup:
        href="{% url 'App_Login:login' %}


26. now write logout:
App_Login/views.py:

        add also a decorator:
from django.contrib.auth.decorators import login_required

@login_required
def logout_user(request):
    logout(request)
    return HttpResponseRedirect(reverse('index'))

27. urls pattern:
    path('logout/', views.logout_user, name='logout'),

28. now add base.html: open for login and logout:

        {% if user.is_authenticated %}
            <li class="nav-item">
              <a class="nav-link" href="{% url 'App_Login:logout' %}">Logout</a>
            </li>
            {% else %}
            <li class="nav-item">
              <a class="nav-link" href="{% url 'App_Login:signup' %}">Sign up</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="{% url 'App_Login:login' %}">Login</a>
            </li>
        {% endif %}

29. kono page er permission na thakle, 
take login page e niya asa hobe: 
setting.py:

        LOGIN_URL = '/account/login/'



V6:
add email address in Sign up:
30. create forms.py file in App_Login:

        from dataclasses import fields
        from django import forms
        from django.contrib.auth.forms import UserCreationForm
        from django.contrib.auth.models import User

        class SignUpForm(UserCreationForm):
        email = forms.EmailField(label="Email Address", required=True)
        class Meta:
                model = User
                fields = ('username', 'email', 'password1', 'password2')

 31. sign_up viwes te amader create kora form use korbO:
 App_Login > views.py:
        from App_Login.forms import SignUpForm

                form = SignUpForm()   

32. create user profile:
i. templates/App_Login/profile.html:
        {% extends 'base.html' %}
        {% block title_block %} Profile {% endblock %}
        {% block body_block %}
        <h2>Your Profile</h2>
        <p>Username: {{ user.username }} </p>
        <p>Email: {{ user.email }} </p>
        <p>Name: {{ user.first_name }} {{ user.last_name }}</p>

        {% endblock %}

ii. call user profile, write a view:
App_Login/views.py:
        @login_required
        def profile(request):
        return render(request, 'App_login/profile.html', context={})

iii. now add a link in base.html:
        <li class="nav-item">
              <a class="nav-link" href="{% url 'App_Login:profile' %}">Your Profile</a>
        </li>

iv. add urls
App_Login/urls.py:
    path('profile/', views.profile, name='profile'),

33. profile details info change:
i. App_Login/forms.py:

        class UserProfileChange(UserChangeForm):
        class Meta:
                model = User
                fields = ('username', 'email', 'first_name', 'last_name', 'password')

ii. viwes.py:
        @login_required
        def user_change(request):
        current_user = request.user
        form = UserProfileChange(instance=current_user)
        if request.method == 'POST':
                form = UserProfileChange(request.POST, instance=current_user)
                if form.is_valid():
                form.save()
                form = UserProfileChange(instance=current_user)

        return render(request, 'App_Login/change_profile.html', context={'form': form})

iii. App_Login/change_profile.html:

        {% extends 'base.html' %}
        {% load crispy_forms_tags %}
        {% block title_block %} Change Profile {% endblock %}
        {% block body_block %}
        <form method="POST">
        {{ form|crispy }}
        {% csrf_token %}
        <button type="submit" class="btn btn-warning btn-sm">Change</button>
        </form>

        {% endblock %}

iv. now add link to go change_profile.html,
profile.html:
        <a href="">Change Profile Info</a>

v. App_Login/urls.py:
    path('change-profile/', views.user_change, name='user_change')


vi. now in profile.html:
        <a href="{% url 'App_Login:user_change' %}" class="btn btn-warning btn-sm">Change Profile Info</a>

34. password change form:
i. App_Login/views.py:
        @login_required
        def pass_change(request):
        current_user = request.user
        form = PasswordChangeForm(current_user)
        if request.method == 'POST':
                form = PasswordChangeForm(current_user, data=request.POST)
                if form.is_valid():
                form.save()

        return render(request, 'App_Login/pass_change.html', context={'form': form})


ii. change_pass.html:
        {% extends 'base.html' %}
        {% load crispy_forms_tags %}
        {% block title_block %} Change Password {% endblock %}
        {% block body_block %}
        <form method="POST">
        {{ form|crispy }}
        {% csrf_token %}
        <button type="submit" class="btn btn-warning btn-sm">Change</button>
        </form>

        {% endblock %}

iii. urls.py:
    path('password/', views.pass_change, name='pass_change')

iv: views.py:
        @login_required
        def pass_change(request):
        current_user = request.user
        changed = False
        form = PasswordChangeForm(current_user)
        if request.method == 'POST':
                form = PasswordChangeForm(current_user, data=request.POST)
                if form.is_valid():
                form.save()
                changed = True
        return render(request, 'App_Login/pass_change.html', context={'form': form, 'changed': changed})

v: pass_change.html:
        {% extends 'base.html' %}
        {% load crispy_forms_tags %}
        {% block title_block %} Change Password {% endblock %}
        {% block body_block %}
        {% if changed %}
        <div class="alert alert-success">
        Password Change Successfully!
        </div>
        {% endif %}
        <form method="POST">
        {{ form|crispy }}
        {% csrf_token %}
        <button type="submit" class="btn btn-warning btn-sm">Change</button>
        </form>

        {% endblock %}

// now we can change password.



V7:
user profile image:
here first we put avatar.png image in profile_pics:
it will show, if anyone not set profile image yet,

35. for show media file:
i.main project /urls.py:

        from django.contrib.staticfiles.urls import static, staticfiles_urlpatterns


        urlpatterns += staticfiles_urlpatterns()
        urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

ii. profile.html:
// here, check is there any data in user profile:
        {% extends 'base.html' %}
        {% block title_block %} Profile {% endblock %}
        {% block body_block %}
        <h2>Your Profile</h2>
        {% if user.user_profile %}
        <img src='/media/{{user.user_profile.profile_pic}}' class="rounded-circle" width="100px">
        {% else %}
        <img src='/media/profile_pics/avatar.png' class="rounded-circle" width="100px">
        {% endif %}
        <p>Username: {{ user.username }} </p>
        <p>Email: {{ user.email }} </p>
        <p>Name: {{ user.first_name }} {{ user.last_name }}</p>
        <br>
        <a href="{% url 'App_Login:user_change' %}" class="btn btn-warning btn-sm">Change Profile Info</a>
        {% endblock %}


36. if no user image there:
profile.html:
        {% if user.user_profile %}
        <img src='/media/{{user.user_profile.profile_pic}}' class="rounded-circle" width="100px">
        {% else %}
        <img src='/media/profile_pics/avatar.png' class="rounded-circle" width="100px">
        <br>
        <br>
        <a href="" class="btn btn-info btn-sm">Change Profile Pic</a>
        {% endif %}


37. for image change:
i.forms.py:

        class ProfilePic(forms.ModelForm):
        class Meta:
                model = UserProfile
                fields = '__all__'

ii. viwes.py:
        @login_required
        def add_pro_pic(request):
        form = ProfilePic()
        return render(request, 'App_Login/pro_pic_add.html', context={'form': form})

iii. urls.py:
    path('add-picture/', views.add_pro_pic, name='add_pro_pic'),


iv. create pro_pic_add.html:
{% extends 'base.html' %}
{% load crispy_forms_tags %}
{% block title_block %} Profile {% endblock %}
{% block body_block %}
<h2> Add Your Profile Picture:</h2>
<form method="POST" enctype="multipart/form-data">
    {{ form|crispy }}
    {% csrf_token %}
    <button type="submit" class="btn btn-success btn-sm">Add</button>
</form>
{% endblock %}


v. now call the view in profile.html:
        <a href="{% url 'App_Login:add_pro_pic' %}" class="btn btn-info btn-sm">Change Profile Pic</a>

vi. forms.py:
        class ProfilePic(forms.ModelForm):
        class Meta:
                model = UserProfile
                fields = ['profile_pic', ]



vii. handle after select image:
views.py:
        @login_required
        def add_pro_pic(request):
        form = ProfilePic()
        if request.method == 'POST':
                form = ProfilePic(request.POST, request.FILES)
                if form.is_valid():
                user_obj = form.save(commit=False)
                user_obj.user = request.user
                user_obj.save()
                return HttpResponseRedirect(reverse('App_login:profile'))

        return render(request, 'App_Login/pro_pic_add.html', context={'form': form})



38. already upload image change:
i. views.py:
        @login_required
        def chnage_pro_pic(request):
        form = ProfilePic(instance=request.user.user_profile)
        return render(request, 'App_Login/pro_pic_add.html', context={'form': form})

ii. urls.py:
    path('change-picture/', views.chnage_pro_pic, name='change_pro_pic'),

iii. call in profile.html:
        <a href="{% url 'App_Login:change_pro_pic' %}" class="btn btn-info btn-sm">Change Profile Pic</a>

iv. handle submit:
viwes.py:
        @login_required
        def chnage_pro_pic(request):
        form = ProfilePic(instance=request.user.user_profile)
        if request.method == 'POST':
                form = ProfilePic(request.POST, request.FILES,
                                instance=request.user.user_profile)
                if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('App_Login:profile'))
        return render(request, 'App_Login/pro_pic_add.html', context={'form': form})


39. replace old image with new image: django clean up:
i.      pip install django-cleanup
ii. settings.py:
        // add app here:
        INSTALLED_APPS = [
                'django.contrib.admin',
                'django.contrib.auth',
                'django.contrib.contenttypes',
                'django.contrib.sessions',
                'django.contrib.messages',
                'django.contrib.staticfiles',
                'App_Blog',
                'App_Login',
                'crispy_forms',
                'django_cleanup.apps.CleanupConfig',

        ]

        // now old image will replace with new image


V8:
// navigation bar:
40:
i. base.html: add toggle--

        <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
        <ul class="navbar-nav">
                <li class="nav-item active">
                <a class="nav-link" href="{% url 'index' %}">Home</a>
                </li>
                {% if user.is_authenticated %}
                <div class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbardrop" data-toggle="dropdown">
                        @{{ user.username }}
                        </a>
                        <div class="dropdown-menu">
                        <a class="dropdown-item" href="{% url 'App_Login:profile' %}">Your Profile</a>
                        <a class="dropdown-item" href="{% url 'App_Login:logout' %}">Logout</a>
                        </div>
                </div>
                {% else %}
                <li class="nav-item">
                        <a class="nav-link" href="{% url 'App_Login:signup' %}">Sign up</a>
                </li>
                <li class="nav-item">
                        <a class="nav-link" href="{% url 'App_Login:login' %}">Login</a>
                </li>
                {% endif %}
        </ul>
        </nav>

ii. display img in home button
base.html:
        <a class="nav-link" href="{% url 'index' %}"><img src="/media/logo.png" width="50px"></a>


V9:
Blog template creation:
41.
create this file in templates/App_Blog:
blog_details.html:      protekta blog er details dekhabe
create_blog.html:
edit_blog.html:
my_blogs.html:




42:
i. App_Blog/models.py:
        // Likes class er object representation

    def __start__(self):
        return self.user + " likes " + self.blog

ii. App_Blog/views.py:
class base view niya kaj korbo:

// decorator R mixins er kaj same, button
// decorator use for funcion view
// mixins use for classbase view

from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin

class CreateBlog(LoginRequiredMixin, CreateView):
    model = Blog
    template_name = 'App_Blog/create_blog.html'
    fields = '__all__'

    
ii. ei view ke call korar jonno App_Blog/urls.py:

    path('write/', views.CreateBlog.as_view(), name='create_blog'),

iii. etake ekon base.html: e add korbO

                  <div class="dropdown-menu">
                    <a class="dropdown-item" href="{% url 'App_Blog:create_blog' %}">Write Blog</a>
                    <a class="dropdown-item" href="{% url 'App_Login:profile' %}">Your Profile</a>
                    <hr>
                    <a class="dropdown-item" href="{% url 'App_Login:logout' %}">Logout</a>
                  </div>

iv: create_blog.html:

{% load crispy_forms_tags %}


<h2>Write Your Blog Here: </h2>
<form method="POST" enctype="multipart/form-data">
    {{ form|crispy}}
    {% csrf_token %}
    <button type="submit" class="btn btn-success btn-sm">Publish</button>
</form>


v:
// ekhane sob field chole asche, Author field ke hide kore dite hobe,
tai sob field nite parbo na,
views.py:

        class CreateBlog(LoginRequiredMixin, CreateView):
        model = Blog
        template_name = 'App_Blog/create_blog.html'
        fields = ('blog_title', 'blog_content', 'blog_image', )


--------------------------------------------------------------------
test in console:
>>> import uuid
>>> title = "this is a blog post"
>>> slug = title.replace(" ", "-") + "-" + str(uuid.uuid4())
>>> print(slug)
this-is-a-blog-post-c740af1c-5a8d-4db2-b916-0c421de596d3
-------------------------------------------------------------------


    def form_valid(self, form):
        blog_obj = form.save(commit=False)
        blog_obj.author = self.request.user      # current use
        title = blog_obj.blog_title
        blog_obj.slug = title.replace(" ", "-") + "-" + str(uuid.uuid4())
        blog_obj.save()
        return HttpResponseRedirect(reverse('index'))


V10:
43: App_Blog/views.py:
Now we use classbase view:
i. views.py:
class BlogList(ListView):
    context_object_name = 'blogs'
    model = Blog
    template_name = 'App_Blog/blog_list.html'

ii. urls.py:
    path('', views.BlogList.as_view(), name='blog_list'),

iii. blog_list.html:
{% extends 'base.html' %}
{% block title_block %} Home {% endblock %}
{% block body_block %}

{% for blog in blogs%}
<h3>{{ blog.blog_title }}</h3>
<h6>{{ blog.publish_date }}</h6>

{% endfor %}

{% endblock %}


// here problem is time zone
vi. settings.py:
TIME_ZONE = 'Asia/Dhaka'

// last post agay dekhabo, mean update post sobar samne thakbe:
1 way:
viwes.py > BlogList: e    queryset korte pari
    queryset = Blog.objects.order_by('-publish_date')

here, minus(-) sign dile decending order, r na dile accending order

2nd way: model e modde set kore dite pari:


class Blog(models.Model):

    class Meta:
        ordering = ['-publish_date',]
                                // eder list ba tupple er modee dite pari


v. blog order:
blog_list.html:
img and blog side by side:


{% for blog in blogs%}
<h3>{{ blog.blog_title }}</h3>
<h6><i>{{ blog.publish_date }}</i></h6>

<div class="row">
    <div class="col-sm-4">
        <img src="/media/{{blog.blog_image}}" alt="{{blog.blog_title}}" title="{{blog.blog_title}}" width="100%">
    </div>
    <div class="col-sm-8">
        <p>{{blog.blog_content|linebreaks}}</p>
        <h6>Posted By: <a href="#">@{{blog.author}}</a></h6>
    </div>
</div>
<hr>
{% endfor %}




v. see more as like custom filter create:
in App_Blog:
create a folder templatetags:
here create file:
        __init__.py
        custom_filters.py

in custom_filters.py:

        from atexit import register
        from django import template

        register = template.Library()


        def range_filter(value):
        return value[0:500] + ".........."


        register.filter('range_filter', range_filter)

vi. blog list: // here filter load,
        // pasa pasi doi ta filter load kora jay:
        {% extends 'base.html' %}
->      {% load custom_filters %}
        {% block title_block %} Home {% endblock %}
        {% block body_block %}

        {% for blog in blogs%}
        <h3>{{ blog.blog_title }}</h3>
        <h6><i>{{ blog.publish_date }}</i></h6>

        <div class="row">
        <div class="col-sm-4">
                <img src="/media/{{blog.blog_image}}" alt="{{blog.blog_title}}" title="{{blog.blog_title}}" width="100%">
        </div>
        <div class="col-sm-8">
 ->             <p>{{blog.blog_content|range_filter|linebreaks}}</p>
                <h6>Posted By: <a href="#">@{{blog.author}}</a></h6>
        </div>
        </div>
        <hr>
        {% endfor %}

        {% endblock %}


V11: Blog details view
44.
i. views.py:
        @login_required
        def blog_details(request, slug):
        blog = Blog.objects.get(slug=slug)

        return render(request, 'App_Blog/blog_details.html', context={'blog': blog})

ii. urls.py:
    path('details/<slug:slug>', views.blog_details, name='blog_details'),

iii. blog_details.html:
{% extends 'base.html' %}
{% block title_block %} {{blog.blog_title}} {% endblock %}
{% block body_block %}
<div class="row">
    <div class="col-sm-6">
        <h2>{{blog.blog_title}}</h2>
        <h4>Posted By: @{{blog.author}}</h4>
        <i><h6>Published On: {{blog.publish_date}}</h6></i>
        <i><h6>Updated On: {{blog.update_date}}</h6></i>
    </div>
    <div class="col-sm-6">
        <img src="/media/{{blog.blog_image}}" width="100%">
    </div>
    <p>{{blog.blog_content|linebreaks}}</p>
</div>

{% endblock %}



// ekon see more thake blog_details.html e asbo:
iv.:
    <div class="col-sm-8">
        <p>{{blog.blog_content|range_filter|linebreaks}} 
            <a href="{% url 'App_Blog:blog_details' slug=blog.slug %}">Read more</a>
        </p>
        <h6>Posted By: <a href="#">@{{blog.author}}</a></h6>
    </div>


45. comment form generate:
i. form create:
App_Blog/forms.py:
        from dataclasses import field
        from django import forms
        from App_Blog.models import Blog, Comment


        class CommentForm(forms.ModelForm):
        class Meta:
                model = Comment
                fields = ('comment', )

ii. views.py:
from App_Blog.forms import CommentForm


        @login_required
        def blog_details(request, slug):
        blog = Blog.objects.get(slug=slug)
        comment_form = CommentForm()

        if request.method == 'POST':
                comment_form = CommentForm(request.POST)
                if comment_form.is_valid():
                comment = comment_form.save(commit=False)
                comment.user = request.user
                comment.blog = blog
                comment.save()
                return HttpResponseRedirect(reverse('App_Blog:blog_details', kwargs={'slug': slug}))
                
        
        
        return render(request, 'App_Blog/blog_details.html', context={'blog': blog', comment_form':comment_form})

iii. blog_details.html e comment dayar option create korte hobe:

<div class="row">
    <div class="col-sm-6">
        <hr>
        <h5>Comments:</h5>

        {% for comment in blog.blog_comment.all %}
        <p><a href="#">@{{comment.user}}</a> {{comment.comment}} <br> <h6>{{comment.comment_date}}</h6></p>

        {% endfor %}
    </div>
    <div class="col-sm-6">
        <form method="POST">
            {{ comment_form|crispy }}
            {% csrf_token %}
            <button type="submit" name="button" class="btn btn-primary btn-sm">Comment</button>
        </form>
    </div>
</div>
<br>
<br>




V12:
46. like button:
i. add CDN in base.html:

ii. blog_details.html:
        <a href="#">
        <i class="far fa-thumbs-up fa-2x"></i>
        </a>
        <a href="#">
        <i class="far fa-thumbs-down fa-2x"></i>
        </a>

iii. views.py:
        @login_required
        def liked(request, pk):
        blog = Blog.objects.get(pk=pk)
        user = request.user
        already_liked = Likes.objects.filter(blog=blog, user=user)
        if not already_liked:
                liked_post = Likes(blog=blog, user=user)
                liked_post.save()

        return HttpResponseRedirect(reverse('App_Blog:blog_details', kwargs={'slug': blog.slug}))



        @login_required
        def unliked(request, pk):
        blog = Blog.objects.get(pk=pk)
        user = request.user
        already_liked = Likes.objects.filter(blog=blog, user=user)
        already_liked.delete()

        return HttpResponseRedirect(reverse('App_Blog:blog_details', kwargs={'slug': blog.slug}))


iv. now call it from urls.py:
    path('liked/<pk>', views.liked, name='liked_post'),
    path('unliked/<pk>', views.unliked, name='unliked_post'),

v. edit blog_details view:
        @login_required
        def blog_details(request, slug):
        blog = Blog.objects.get(slug=slug)
        comment_form = CommentForm()
        already_liked = Likes.objects.filter(blog=blog, user=request.user)
        if already_liked:
                liked = True
        else:
                liked = False
        if request.method == 'POST':
                comment_form = CommentForm(request.POST)
                if comment_form.is_valid():
                comment = comment_form.save(commit=False)
                comment.user = request.user
                comment.blog = blog
                comment.save()
                return HttpResponseRedirect(reverse('App_Blog:blog_details', kwargs={'slug': slug}))

        return render(request, 'App_Blog/blog_details.html', context={'blog': blog, 'comment_form': comment_form, 'liked': liked})

vi. blog_details.html:
        {% if not liked %}
        <a href="{% url 'App_Blog:liked_post' pk=blog.pk %}">
        <i class="far fa-thumbs-up fa-2x"></i>
        </a>
        {% else %}
        <a href="{% url 'App_Blog:unliked_post' pk=blog.pk %}">
        <i class="far fa-thumbs-down fa-2x"></i>
        </a>
        {% endif %}


47. like, dislike count:
blog_details.html:
        <h6>{{blog.liked_blog.count}} Likes |  {{blog.blog_comment.count}} Comments</h6>










